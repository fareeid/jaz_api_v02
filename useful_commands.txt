-------------Powershell Commnand-----------
Environment variables
$Env:windir    --------------View
$Env:Foo = 'An example'  ----------create
$Env:MyTestEnvVariable = $null  -------delete
$env:Path.split(';') -----------View formatted path
$env:Path = 'C:\foo;' + $env:Path     -------------attach to the beginning
$env:Path += ';C:\foo'                --------------attach to the end
$Env:Path +=';C:\Users\mathew.kimweli.JUBILEE\.vscode\extensions\charliermarsh.ruff-2023.38.0-win32-x64\bundled\libs\bin'
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.3 ---------More info
ni app/main.py requirements.txt
where.exe flake8   Display the path of some command e.g. flake8
$PROFILE | Select-Object *

-------------Docker--------------
docker --version                                                                                                                         
docker-compose --version                                                                                                                 
docker-compose logs -f                                                                                                                   
docker-compose -f docker-compose.prod.yml up -d --build
docker-compose exec db psql --username=jaz_api_v02 --dbname=jaz_api_v02
docker-compose exec web alembic init -t async migrations                                                          
docker-compose exec web alembic revision --autogenerate -m "init"  
docker-compose exec web alembic upgrade head  
docker-compose exec web alembic downgrade base
docker-compose exec web alembic stamp base
docker-compose down -v                                                                                            
docker-compose -f docker-compose.yml down -v                                                                      
docker-compose up -d --build                                                                                      
docker inspect                                                                                                    
docker inspect f            

---------------Database commands--------------
docker-compose exec web aerich init -t app.db.TORTOISE_ORM
docker-compose exec web aerich init-db
docker-compose exec web aerich upgrade
docker-compose exec web-db psql -U postgres 
docker-compose exec web-db python app/db.py

----------Check container db ipaddress-------------
docker-compose exec db ifconfig
docker-compose exec db apt-get update
docker-compose exec db apt-get -y install net-tools

---------Configure alembic for backend container---------------
sqlalchemy.url = postgresql://postgres:changethis@db/app
docker-compose exec backend alembic init migrations
docker-compose exec backend alembic revision --autogenerate -m "init"
docker-compose exec backend alembic upgrade head

---------Allow your project to be importable---------- Run this in backend web
export PYTHONPATH=/app:/app/app
echo $PYTHONPATH
python app/initial_data.py

-----REsolve Jinja2 dependency
pip install markupsafe==2.0.1
# pip install pipdeptree
pipdeptree -r -p markupsafe

---------------Testing and coverage-------------------
docker-compose exec web python -m pytest                                            -------------- normal run
docker-compose exec web python -m pytest -p no:warnings                             -----------disable warnings
docker-compose exec web python -m pytest -k "summary and not test_read_summary"     ----------------run only the tests with names that match the string expression
docker-compose exec web python -m pytest -x                                         -----------stop the test session after the first failure
docker-compose exec web python -m pytest -x --pdb                                   -------------enter PDB after first failure then end the test session
docker-compose exec web python -m pytest --maxfail=2                                ---------------stop the test run after two failures
docker-compose exec web python -m pytest -l                                         --------------show local variables in tracebacks
docker-compose exec web python -m pytest --durations=2                              -------------list the 2 slowest tests
docker-compose exec web python -m pytest --cov="."                                 ------------- Coverage report
docker-compose exec web python -m pytest --cov="." --cov-report html

--------Code quality and formatting------------
docker-compose exec web flake8 .
docker-compose exec web black . --check
docker-compose exec web black . --diff
docker-compose exec web black .
docker-compose exec web isort . --check-only
docker-compose exec web isort . --diff
docker-compose exec web isort .

--------------Poetry--------------
poetry --info
poetry init                                                                                                       
poetry install                                                                                                    
poetry list                                                                                                       
poetry help add                                                                                                   
poetry update all                                                                                                 
poetry update pydantic                                                                                            
poetry add sqlalchemy                                                                                             
poetry add fastapi-users[sqlalchemy]                                                                              
poetry show                                                                                                       
poetry add alembic                                                                                                                                                                                  
poetry add --group dev mypy             
poetry self add poetry-types
poetry types add sqlalchemy

-------------pip----------                                                                                                                            
pip install --no-deps ormar   
pip uninstall ormar                                                                                               
pip list                                                                                                          

-------------Git--------------
git version                                                                                                       
git init                                                                                                          
git add .                                                                                                         
git commit -m "Initial setup of jaz_api_v02"                                                                      
git remote add origin https://github.com/fareeid/jaz_api_v02.git                                                  
git branch -M main                                                                                                
git push -u origin main                                                                                           
git status                                                                                                        
git config --global user.email "faridkim@gmail.com"                                                               
git config --global user.name "Fareeid"                                                                           
git clone https://github.com/fareeid/jaz_api_v02.git
git fetch --all  --------------Fetch all branches
git checkout uat_branch ----------sqitch to new branch

--------------Fastapi--------------
uvicorn app.main:app --reload --port=8001

--------------Conda commands-----------
cd C:\ProgramData\miniconda3\condabin>
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
./conda init powershell -- then Restart the Powershell
conda deactivate                                                                                                  
conda remove help                                                                                                 
conda remove --name fastapi3 --all
conda env list
conda deactivate                                                                                                  
conda create --name jaz_api_v0.2 python=3.11                                                                      
conda activate jaz_api_v0.2       
conda config --set auto_activate_base false    ----------- To stop conda starting by default run in powershell

psql -d database -U user -W	--------------- Connects to a database under a specific user	-d: used to state the database name -U:used to state the database user
psql -h host -d database -U user -W	--------------- Connect to a database that resides on another host	-h: used to state the host -d: used to state the database name -U:used to state the database user
psql -U user -h host “dbname=db sslmode=require”	--------------- Use SSL mode for the connection	-h: used to state the host -U:used to state the database user
\c dbname	--------------- Switch connection to a new database	 
\l	--------------- List available databases	 
\dt	--------------- List available tables	 
\d table_name	--------------- Describe a table such as a column, type, modifiers of columns, etc.	 
\dn	--------------- List all schemes of the currently connected database	 
\df	--------------- List available functions in the current database	 
\dv	--------------- List available views in the current database	 
\du	--------------- List all users and their assign roles	 
SELECT version();	--------------- Retrieve the current version of PostgreSQL server	 
\g	--------------- Execute the last command again	 
\s	--------------- Display command history	 
\s filename	--------------- Save the command history to a file	 
\i filename	--------------- Execute psql commands from a file	 
\?	--------------- Know all available psql commands	 
\h	--------------- Get help	Eg:to get detailed information on ALTER TABLE statement use the \h ALTER TABLE
\e	--------------- Edit command in your own editor	 
\a	--------------- Switch from aligned to non-aligned column output	 
\H	--------------- Switch the output to HTML format	 
\q	--------------- Exit psql shell                                             

----------------------Heroku---------------------
heroku token eb23d346-31e8-4f7d-b3f3-a81681ff1776
longterm token 89fbf26e-9702-433a-9696-2cd92e8eb7bb
heroku addons:create heroku-postgresql:mini --app hidden-reef-56486
heroku addons:destroy postgresql-curly-30488
docker build -f project/Dockerfile.prod -t registry.heroku.com/hidden-reef-56486/web ./project
docker run --name fastapi-tdd -e PORT=8765 -e DATABASE_URL=sqlite://sqlite.db -p 5003:8765 registry.heroku.com/hidden-reef-56486/web:latest
docker rm fastapi-tdd -f
docker push registry.heroku.com/hidden-reef-56486/web:latest
heroku container:release web --app hidden-reef-56486
heroku run aerich upgrade --app hidden-reef-56486
https://hidden-reef-56486-d4846fb59f32.herokuapp.com/ping/
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
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
docker build -f project/Dockerfile -t ghcr.io/fareeid/fastapi-tdd/summarizer:latest ./project
docker login ghcr.io -u fareeid -p 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
curl -v -u fareeid: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 https://ghcr.io/v2/
https://github.com/orgs/community/discussions/26252

docker build -f project/Dockerfile.prod -t web ./project                           -----------------Build an image tagged web
docker run --name fastapi-tdd -e PORT=8765 -e DATABASE_URL=sqlite://sqlite.db -p 5003:8765 web:latest        -----------------run a container named fastapi-tdd from an image named web with tag latest


https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli               -----------install
az account set --subscription Allianz-dataplatform
az provider register --namespace Microsoft.CloudShell
az account list
az provider show -n Microsoft.CloudShell
az login
az containerapp up --resource-group web-fastapi-aca-rg --name web-aca-app --ingress external --target-port 80 --source .
az containerapp --help
az containerapp up --help
az account list-locations
az account list-locations > locations.txt
az configure --defaults location=northeurope
az group delete --name web-fastapi-aca-rg
docker run -it mcr.microsoft.com/azure-cli


You can find nearly everything inside the Request object. You are able to get request body with request.json(), which will give you the parsed JSON as dictionary.
(https://stackoverflow.com/questions/64379089/how-to-read-body-as-any-valid-json)https://stackoverflow.com/questions/64379089/how-to-read-body-as-any-valid-json

from fastapi import Request, FastAPI

@app.post("/dummypath")
async def get_body(request: Request):
    return await request.json()
